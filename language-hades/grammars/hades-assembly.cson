name: "HADES Assembly"
scopeName: "source.hades-asm"
fileTypes: [
  "has"
]
patterns: [
  {
    include: "#entities"
  }
  {
    include: "#preprocessor"
  }
  {
    include: "#comments"
  }
]
repository:
  comments:
    patterns: [
      {
        match: "(;|//).*$"
        name: "comment.line"
      }
      {
        begin: "/\\*"
        end: "\\*/"
        name: "comment.block"
      }
    ]
  constants:
    patterns: [
      {
        match: "(?<=#)(0b[01]+|[01]+b)\\b"
        name: "constant.numeric.bin"
      }
      {
        match: "(?<=#)(-?[0-9]+)\\b"
        name: "constant.numeric.dec"
      }
      {
        match: "(?<=#)((0x[0-9a-fA-F]+)|([0-9a-fA-F]+h))\\b"
        name: "constant.numeric.hex"
      }
      {
        match: "'((\\\\.)|([^\\\\]))'"
        captures:
          "2":
            name: "constant.character.escape.hades-asm"
        name: "string.quoted.single"
      }
    ]
  entities:
    patterns: [
      {
        begin: "@((?i:mac|code))\\b\\s*([A-Za-z_][A-Za-z0-9_]+)?\\s*{"
        beginCaptures:
          "1":
            name: "storage.type"
          "2":
            name: "entity.name.function"
        name: "meta.block.code"
        end: "@}"
        patterns: [
           {
             include: "#registers"
           }
           {
             include: "#mnemonics"
           }
           {
             include: "#constants"
           }
           {
             include: "#strings"
           }
           {
             include: "#macrocall"
           }
           {
             include: "#references"
           }
           {
             include: "#preprocessor"
           }
           {
             include: "#comments"
           }
        ]
      }
      {
        begin: "@((?i:data))\\b\\s*([A-Za-z_][A-Za-z0-9_]+)?\\s*{"
        beginCaptures:
          "1":
            name: "storage.type"
          "2":
            name: "entity.name.function"
        name: "meta.block.data"
        end: "@}"
        patterns: [
           {
             include: "#constants"
           }
           {
             include: "#strings"
           }
           {
             include: "#references"
           }
           {
             include: "#preprocessor"
           }
           {
             include: "#comments"
           }
        ]
      }
      {
        match: "@((?i:data))\\b\\s*([A-Za-z_][A-Za-z0-9_]+)?\\s*(\"(?:[^\"\\\\]|\\\\.)*\")"
        captures:
          "1":
            name: "storage.type"
          "2":
            name: "entity.name.function"
          "3":
            name: "constant.character"
            patterns: [
               {
                  include: "#string_escaped_char"
               }
            ]
        name: "meta.block.data"
      }
    ]
  macrocall:
    patterns: [
      {
        match: "@((?i:call))\\b\\s*([A-Za-z_][A-Za-z0-9_]+)?"
        captures:
          "1":
            name: "keyword.call"
          "2":
            name: "entity.name.function"
      }
    ]
  references:
    patterns: [
      {
        match: "\\*([A-Za-z_][A-Za-z_0-9]+)"
        captures:
          "1":
             name: "entity.name.function"
      }
      {
        match: "\\s*([A-Za-z_][A-Za-z_0-9]+):"
        captures:
          "1":
             name: "constant.variable.jumpmark"
      }
      {
        match: "#([A-Za-z_][A-Za-z_0-9]+)"
        captures:
          "1":
            name: "constant.variable.jumpmark"
      }
    ]
  mnemonics:
    patterns: [
      {
        match: "\\b(?i:mov)\\b"
        name: "keyword.data-transfer.mov"
      }
      {
        match: "\\b(?i:addi?|subi?|muli?|inc|dec|ldu?i)\\b"
        name: "keyword.binary-arithmetic"
      }
      {
        match: "\\b(?i:setovi?|getov)\\b"
        name: "keyword.overflow"
      }
      {
        match: "\\b(?i:seqi?|snei?|slti?|sgti?|slei?|sgei?)\\b"
        name: "keyword.comparison"
      }
      {
        match: "\\b(?i:andi?|(xn?)?ori?)\\b"
        name: "keyword.logical"
      }
      {
        match: "\\b(?i:c?sh(r|l)i?)\\b"
        name: "keyword.rotate"
      }
      {
        match: "\\b(?i:j(mp|al|reg))\\b"
        name: "keyword.control-transfer.jmp"
      }
      {
        match: "\\b(?i:reti|beqz|bnez|bov)\\b"
        name: "keyword.control-transfer.other"
      }
      {
        match: "\\b(?i:in|out)\\b"
        name: "keyword.io"
      }
      {
        match: "\\b(?i:load|store)\\b"
        name: "keyword.ma"
      }
      {
        match: "\\b(?i:(d|e)pma)\\b"
        name: "keyword.pma"
      }
      {
        match: "\\b(?i:sisa|(get)?swi|(en|de)i)\\b"
        name: "keyword.intr"
      }
      {
        match: "\\b(?i:nop)\\b"
        name: "keyword.misc"
      }
    ]
  preprocessor:
    patterns: [
      {
        begin: "^\\s*@((?i:inc))\\b"
        captures:
          "1":
            name: "keyword.control.import.include"
        end: "(?=(?://|/\\*|;|$))"
        name: "meta.preprocessor.include"
        patterns: [
          {
            begin: "\""
            beginCaptures:
              "0":
                name: "punctuation.definition.string.begin"
            end: "\""
            endCaptures:
              "0":
                name: "punctuation.definition.string.end"
            name: "string.quoted.double.include"
          }
        ]
      }
      {
        begin: "^\\s*@((?i:l?def))\\b"
        captures:
          "1":
            name: "keyword.control.define"
        name: "meta.preprocessor.c"
        patterns: [
          {
            begin: "\""
            beginCaptures:
              "0":
                name: "punctuation.definition.string.begin"
            end: "\""
            endCaptures:
              "0":
                name: "punctuation.definition.string.end"
            name: "string.quoted.double.include"
          }
        ]
        end: "(?=(?://|/\\*|;|$))"
      }
    ]
  registers:
    patterns: [
      {
        match: "\\b%?(r[0-8])\\b"
        name: "constant.language.registers.general-purpose"
      }
    ]
  string_escaped_char:
    patterns: [
      {
        match: '''(?x)\\\\ (
            \\\\             |
            [abefnprtv'"?]   |
            [0-3]\\d{,2}     |
            [4-7]\\d?        |
            x[a-fA-F0-9]{,2} |
            u[a-fA-F0-9]{,4} |
            U[a-fA-F0-9]{,8} )
        '''
        name: 'constant.character.escape.c'
      }
      {
        match: '\\\\.'
        name: 'invalid.illegal.unknown-escape.c'
      }
    ]
  strings:
    patterns: [
      {
        begin: "\""
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.asm"
        end: "\""
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.asm"
        name: "string.quoted.asm"
        patterns: [
          {
            include: "#string_escaped_char"
          }
          {
            include: "#string_placeholder"
          }
        ]
      }
    ]
